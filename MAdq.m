function data = MAdq(path)
% MAdq opens .madq files generated by the Signal Acquisition Module (MADQ)
%
%   data = MAdq(path) MAdq opens .madq files generated by the Signal
%   Acquisition Module (MADQ) from the Multichannel Multimodal
%   Electrophysiological Signal and Stimulation Platform. The function 
%   returns variables corresponding to physiological signals or 
%   general-purpose signals stored during a signal capture session. 
%   Additionally, the binary file contains information such as:
%   - User-defined markers during data acquisition,
%   - Number of received packets,
%   - Sampling frequency,
%   - Among other metadata.
%
%   Syntax:
%     data = MAdq(path)
%
%   Input:
%     path (string) - Path to the target file. (optional) 
% 
%   Ouputs:
%     data                      - A struct with signal data and metadata:
%       .versionMADQ            - Signal Acquisition Module version
%       .versionFirmware        - Firmware Version
%       .fs                     - Frequency sample in Hz
%       .numberChannels         - Number os channels
%       .numberChannelsTrigger  - Number of trigger channels
%       .numberChannelsADC      - Number of ADC channels
%       .chNames                - Names of Channels
%       .gain                   - Gains of signals
%       .date                   - Date of data registry
%       .comments               - Comments
%       .marks                  - Marks Position
%       .marksNames             - Cell of marks names
%       .signal                 - Processed signal with gain, offset, and scaling applied
%       .trigger                - Trigger signal (if enabled)
%       .ADC                    - ADC signal (if enabled)
%       .numberSamples          - Number of samples
%       .path                   - Path file
%       .signal_units           - Units of signal
%       .ADC_units              - Units of ADC signal
%       .fs_units               - Units of frequency sample
%
%   Example:
%     % Example 1: Without pathname
%     ma_data = MAdq();
%     disp(ma_data)
%     signal_raw = ma_data.signal; % #channels x #samples
%     fs = ma_data.fs; % Hz
%
%     % Example 2: With pathname
%     ma_data = MAdq("C:\User\Vol1.madq");
%
%   Version history reference:
%   This file is based on signal reading algorithms developed by:
%     - Cagy, M. (2006)
%     - d,Affonséca, A. (2011, 2013)
%     - Cevallos-Larrea, P. (2018)
%
%   Modified by:
%     - Guambaña, L. on 20/01/2021
%     - Guambaña, L. and Cevallos-Larrea, P. on 02/08/2022
%     - Molina Vidal, D.A. on 01/06/2023
%     - Molina Vidal, D.A. on 30/04/2025
%
%   Changes:
%     - Added: reading of user-generated markers from the software
%     - Added: reading of the number of analog channels
%     - Added: separation of analog channels (variable: ADCchannels)
%     - Added: separation of digital channels (ADS triggers, variable: trigger)
%     - Correct unit conversion (volts) for analog channels 
%     - Trigger returns an empty variable if no digital channels are available
%     - Translate to english
%     - Revision of variables names and comments.
%
%   Version:  1.0
%   Date:     02/06/2025
%   Last modification: 15/05/2025 by Molina-Vidal, D.A. and Kauati-Saito, E.
%
%   Download more functions on our Github:
%    https://github.com/engneural

% Path creation/format 

% Archive the path containing the data (path)
if nargin == 0
    dialogue = true;
end

% empty default directory
path_arq = [];

if (nargin == 1)
    [path_arq,arq_name,est_arq] = fileparts(path);
    
    if isempty(arq_name) || isempty(est_arq)
        dialogue = true;
        if isempty(est_arq) && ~isempty(arq_name)
            path_arq = [path_arq,'\',arq_name];
        end
    else
        dialogue = false;
        nameARQdig = path;
    end
end

% open the file dialog with the default directory    
if dialogue
    [nameFile,PATH_] = uigetfile('*.madq', 'Select the file', path_arq);
    if nameFile==0
        data = []; % returns empty if opening is cancelled
        return;
    end
    nameARQdig = [PATH_, nameFile];
end

% Open File

ARQ = fopen(nameARQdig,'rb');

if ARQ<0
    exibe('This file could not be opened!', 'Error!');
    error('This file could not be opened!')
end
% sinais.F_amost_in=[]; % Initializes the sampling frequency with an empty 
% matrix;
% Used to allow the inclusion of a "default" value in the sampling 
% frequency dialog box, when it is possible to retrieve it from the file 
% header.

% PEB file format:
% elseif tipo==4,
% Bph = 1; % Bytes per header element
Bpa = 4; % Bytes per sample
% preci = 'int32';
% preci = 'float64';

% Header Reading
nChar = fread(ARQ,1,'uint8'); % first read the size of the MAdq version vector
data.versionMAdq = setstr(fread(ARQ,nChar,'uchar')'); % read the vector with the size read previously
nChar = fread(ARQ,1,'uint8'); % read the size of the Firmware version buffer
data.versionFirmware = setstr(fread(ARQ,nChar,'uchar')');

data.fs=fread(ARQ,1,'uint16');

nChannels = fread(ARQ,1,'uint8'); 
data.numberChannels = nChannels;

nChTrigger = fread(ARQ,1,'uint8'); 
data.numberChannelsTrigger= nChTrigger;

nChADC = fread(ARQ,1,'uint8'); 
data.numberChannelsADC = nChADC;

posADCChannels = fread(ARQ,1,'uint8'); 
% signals.Pos_Canales_ADC= Pos_Canales_ADC;

posTriggerChannels = fread(ARQ,1,'uint8'); 
% signals.Pos_Canales_Trigger= Pos_Canales_Trigger;

% Read name of channels
for k=1:nChannels
    nChar = fread(ARQ,1,'uint8');
    data.chNames{k, 1} = setstr(fread(ARQ,nChar,'uchar')');
end
% Read name of trigger channels
for k=1:nChTrigger
    nChar = fread(ARQ,1,'uint8');
    data.triggerChNames{k, 1} = setstr(fread(ARQ,nChar,'uchar')');
end
% Read channel gain
for k=1:nChannels
    data.gain{k, 1} = fread(ARQ,1,'float64');
end
% Reads channel scales
for k=1:nChannels
    data.scales{k, 1} = fread(ARQ,1,'float64');
end
% Read channel offset
for k=1:nChannels
    data.offset{k ,1} = fread(ARQ,1,'float64');
end

% Read the date
year = fread(ARQ,1,'uint16');
month = fread(ARQ,1,'uint8');
day = fread(ARQ,1,'uint8');
hour = fread(ARQ,1,'uint8');
min = fread(ARQ,1,'uint8');
sec = fread(ARQ,1,'uint8');
data.date = datetime(year, month, day, hour, min, sec);
% Read comments
nChar = fread(ARQ,1,'uint8');
data.comments = setstr(fread(ARQ,nChar,'uchar')');

% Reads maximum quantity of brands
nMarks = fread(ARQ,1,'uint16');

% Read Position of the marks
for k=1:nMarks
    data.marks{k} = fread(ARQ,1,'uint32');
end

% Read marks names
for k=1:nMarks
    nChar=fread(ARQ,1,'uint8');
    data.marksNames{k} = setstr(fread(ARQ,nChar,'uchar')');
end

sizeHeader = ftell(ARQ); % header size 

nCh_statusAD =  nChannels + ceil((nChannels/8)); % Contains the number of channels plus the AD status number.
fseek(ARQ,0,'eof');    % skip to end of file
nFrameCount = 1;  % Variable for framecount data
size_arq = (ftell(ARQ)-sizeHeader)/Bpa;   % size of the file containing the samples
nSamples =fix(size_arq/(nCh_statusAD + nFrameCount + nChADC)); % Size of the signal in number of interleaved samples
size_arq = nSamples*(nCh_statusAD + nFrameCount + nChADC);   % Corrects the size to match an integer number of bytes
fseek(ARQ,sizeHeader,'bof'); % omit the header

[ARQd,sr]=fread(ARQ,size_arq,'int32');

%ARQdig=reshape(ARQdig,Ncanales,Numero_muestras/2);   % assembles the matrix with channels in rows and samples in columns
ARQd=reshape(ARQd,(nCh_statusAD + nFrameCount + nChADC), nSamples);   % assembles the matrix with channels in rows and samples in columns

% Gets only the signals from the channels.
for k = 1:nChannels
    ARQdig(k,:) = ARQd(k,:);
end
% signals.ARQdig = ARQdig;

% Calibrated channel signal
of = cell2mat(data.offset)*ones(1, nSamples);
gan = cell2mat(data.gain)*ones(1, nSamples);
sca = cell2mat(data.scales)*ones(1, nSamples);
% signals.ARQdig2 = (cell2mat(signals.ARQdig) + signals.Offset*ones(1,Numero_muestras)).*(signals.Ganancia*ones(1,Numero_muestras));  % scale the values
data.signal = ((ARQdig - of).*sca)./gan;  % scale the values

% Gets only the signals from the statusAD
% ARQstatusAD= 1;
for k = nChannels + 1:nCh_statusAD
    ARQstatusAD(k-nChannels,:) = ARQd(k,:);
end
% signals.ARQstatusAD = ARQstatusAD;

% Gets the value of Trigger Channels
% Check the code to get the value of the triggers.
if (nChTrigger > 0)
    for k = 1 : nSamples
        for j = 1 : nChTrigger
           data.trigger (j, k) = bitget(ARQstatusAD(1, k), j); %FFFFEF
        end
    end
else
    data.trigger = [];
end

% Obtains only the signals from the analogue channels.
if (nChADC > 0)
    for k = nCh_statusAD + nFrameCount+1:(nCh_statusAD + nFrameCount + nChADC)
        ARQchADC(k-(nCh_statusAD + nFrameCount),:) = ARQd(k,:)*3.3/4095;
    end
	data.ADC = ARQchADC;
else
    data.ADC = 0;
end

% Gets only the signals from the frameCount
% FrameCount(1,:) = ARQd(nCh_statusAD + NFrame_Count,:);
% signals.FrameCount = FrameCount;

data.numberSamples = nSamples;
data.path = nameARQdig;   % Selected file path

data.signal_units = "Volts";
data.ADC_units = "Volts";
data.fs_units = "Hertz";

% Remove variables form a structure
data = rmfield(data, 'offset');
data = rmfield(data, 'scales');

fclose(ARQ);

% For the display of the Trigger signals it is necessary to separate the
% signal ARQstatusAD where each value is 24bits and is made up as 
% 1100 + 8 bits LOFF_STATP + 8 bits LOFF_STATN + 4 bits GPIO 
% The 4 bits of the GPIO are designated as GPIO4, GPIO3, GPIO2, GPIO1.